{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\viraj\\\\Desktop\\\\HMTLCSS\\\\carnot\\\\carnotapp\\\\src\\\\components\\\\Tag.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport React from \"react\";\nimport 'src\\index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tag() {\n  _s();\n\n  const [tags, setTags] = useState([]);\n  const tagInput = /*#__PURE__*/React.createRef();\n\n  const pushTextToTags = inputText => {\n    let newTagElement;\n\n    if (inputText[inputText.length - 1] === ',') {\n      newTagElement = inputText.slice(0, inputText.length - 1);\n      tagInput.current.value = '';\n      setTags([...tags, newTagElement]);\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Tags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tagArea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tagContainer\",\n      children: tags.map(tag => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: tag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: tagInput,\n      type: \"text\",\n      onChange: e => pushTextToTags(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Tag, \"DL0uTSUGlGEljgppeJDEmbue1U0=\");\n\n_c = Tag;\nexport default Tag;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tag\");","map":{"version":3,"sources":["C:/Users/viraj/Desktop/HMTLCSS/carnot/carnotapp/src/components/Tag.jsx"],"names":["useState","React","Tag","tags","setTags","tagInput","createRef","pushTextToTags","inputText","newTagElement","length","slice","current","value","map","tag","e","target"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,eAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEX,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMK,QAAQ,gBAAGJ,KAAK,CAACK,SAAN,EAAjB;;AAEA,QAAMC,cAAc,GAAGC,SAAS,IAAI;AAChC,QAAIC,aAAJ;;AAGA,QAAGD,SAAS,CAACA,SAAS,CAACE,MAAV,GAAmB,CAApB,CAAT,KAAkC,GAArC,EAAyC;AACrCD,MAAAA,aAAa,GAAGD,SAAS,CAACG,KAAV,CAAgB,CAAhB,EAAkBH,SAAS,CAACE,MAAV,GAAiB,CAAnC,CAAhB;AACAL,MAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,GAAyB,EAAzB;AACAT,MAAAA,OAAO,CAAC,CAAE,GAAGD,IAAL,EAAWM,aAAX,CAAD,CAAP;AACH;;AAAA;AACJ,GATD;;AAUF,sBACE;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACCN,IAAI,CAACW,GAAL,CAASC,GAAG,iBAAK;AAAA,kBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,cAAjB;AADD;AAAA;AAAA;AAAA;AAAA,YAHA,eAMA;AAAO,MAAA,GAAG,EAAEV,QAAZ;AAAsB,MAAA,IAAI,EAAC,MAA3B;AAAkC,MAAA,QAAQ,EAAEW,CAAC,IAAET,cAAc,CAACS,CAAC,CAACC,MAAF,CAASJ,KAAV;AAA7D;AAAA;AAAA;AAAA;AAAA,YANA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA1BQX,G;;KAAAA,G;AA4BT,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\"\r\nimport React from \"react\";\r\n\r\nimport 'src\\index.css';\r\n\r\nfunction Tag() {\r\n\r\n    const [tags, setTags] = useState([])\r\n    \r\n    const tagInput = React.createRef();\r\n\r\n    const pushTextToTags = inputText => {\r\n        let newTagElement;\r\n\r\n\r\n        if(inputText[inputText.length - 1]===','){\r\n            newTagElement = inputText.slice(0,inputText.length-1);\r\n            tagInput.current.value = '';\r\n            setTags([ ...tags, newTagElement]);\r\n        };\r\n    }\r\n  return (\r\n    <div>\r\n    <div>Tags</div>\r\n    <div className='tagArea'></div>\r\n    <div className='tagContainer'> \r\n    {tags.map(tag => (<div>{tag}</div>))}\r\n    </div>\r\n    <input ref={tagInput} type='text' onChange={e=>pushTextToTags(e.target.value)}></input>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tag"]},"metadata":{},"sourceType":"module"}